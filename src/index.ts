import { app, BrowserWindow, ipcMain , safeStorage } from 'electron';
import fs from 'fs'
import path from 'path'
import { pathToFileURL } from 'url'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      devTools: true,
      contextIsolation: false,
      webSecurity: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      nodeIntegrationInWorker: true,
    },
    autoHideMenuBar: true
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

ipcMain.handle('encrypt-data', (_, data: string) => {
  try {
    if (!safeStorage.isEncryptionAvailable()) {
      throw new Error('OS-level encryption not available');
    }
    
    if (typeof data !== 'string') {
      throw new Error('Invalid data type for encryption');
    }

    if (data.length === 0) {
      throw new Error('Empty data cannot be encrypted');
    }

    const buffer = safeStorage.encryptString(data);
    return buffer;
  } catch (error) {
    console.error('Encryption error:', error);
    throw error;
  }
});

ipcMain.handle('decrypt-data', (_, buffer: Buffer) => {
  if (!safeStorage.isEncryptionAvailable()) {
    throw new Error('Decryption not available');
  }
  return safeStorage.decryptString(buffer);
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  
  createWindow()
});


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.handle('get-video-files', (event, folderPath) => {
  try {
    const files = fs.readdirSync(folderPath);
    return files
      .filter(file => ['.mp4', '.webm', '.ogg'].includes(path.extname(file).toLowerCase()))
      .map(file => pathToFileURL(path.join(folderPath, file)).href); // Convert to file:// URL
  } catch (error) {
    console.error('Error reading video files:', error);
    return [];
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
